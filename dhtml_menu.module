<?php
// $Id$

/** 
 * DHTML menus
 *
 * Allow click expansion of the menu tree via javascript, with 
 * graceful degradation.
 */

define('DHTML_MENU_USE_EFFECTS', variable_get('dhtml_menu_use_effects', 0));

/**
 * Implementation of hook_theme().
 */
function dhtml_menu_theme($existing, $type) {
  $theme['dhtml_menu_item'] = array(
    'arguments' => array('item' => array(), 'id' => NULL),
  );
  $theme['dhtml_menu_tree'] = array(
    'arguments' => array('tree' => array(), 'parent' => NULL, 'pid' => NULL),
  );
  return $theme;
}


/**
 * Implementation of hook_menu().
 */
function dhtml_menu_menu() {
  $items = array();
  
  $items['admin/settings/dhtml_menu'] = array(
    'title' => 'DHTML Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dhtml_menu_settings'),
  ); 
    
  return $items;
}

/**
 * Basically a copy of menu_block() -- we're providing our own version
 * of each menu.
 */
function dhtml_menu_block($op = 'list', $delta = '') {
  $root_menus = menu_get_menus(true);
  global $user;

  if ($op == 'list') {
    $blocks = array();
    foreach ($root_menus as $mid => $title) { // $mid is a string in 6.x
      $blocks[$mid]['info'] = t('DHTML: ') . $title;
    }
    return $blocks;
  }
  else if ($op == 'view') {
    $tree = menu_tree_all_data($delta);
    $data['content'] = theme('dhtml_menu_tree', $tree);
    if ($user->uid > 0 && $delta == 'navigation') {
      $data['subject'] = $user->name;
    }
    else {
      $data['subject'] = check_plain($root_menus[$delta]);
    }
    return $data;
  }
}

/** 
 * Settings page.
 */
function dhtml_menu_settings() {
  $form['javascript_settings'] = array('#type' => 'fieldset', '#title' => t('JavaScript Settings'), '#collapsible' => true);
  $form['javascript_settings']['dhtml_menu_use_effects'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Use jQuery Slide Effects'), 
    '#description' => t('Menu\'s will slide open and closed.'),
    '#default_value' => DHTML_MENU_USE_EFFECTS, 
    '#return_value' => 1
  );
  
  return system_settings_form($form);
}

// Manual process: Provide all menus that are both parent menus and have
// important content. This adds a pseudo menu item as the first item in
// the container, and lets you rename it too.

// note: replace this with something set from the UI.
function _dhtml_get_add_links() {
  return array(
    'admin' => t('Administer'), 
  );
}

function theme_dhtml_menu_item($item, $id) {
  static $expanded = NULL;
  if (!is_array($expanded)) {
    if (!isset($_COOKIE['dhtml_menu'])) $_COOKIE['dhtml_menu'] = '';
    $expanded = explode(',', $_COOKIE['dhtml_menu']);
  }

  if (!$item['below']) {
    return '  <li class="leaf">' . theme('menu_item_link', $item['link']) . "</li>\n";
  }
  else {
    $type = isset($item['link']['type']) ? $item['link']['type'] : NULL;
    if ($item['link']['in_active_trail'] || $item['link']['expanded'] || in_array("sub$id", $expanded)) {
      $state = 'expanded';
      $display = '';
    }
    else {
      $state = 'collapsed';
      $display = 'style="display: none;"';
    }		      

    $output = "<li class=\"menutitle $state\" id=\"menu-sub$id\">";
    $output .= theme('menu_item_link', $item['link']);
    $output .= '<div class="submenu" id="sub'. $id .'" '. $display .'>'. "\n";
    $output .= theme('dhtml_menu_tree', $item['below'], $item['link'], $id) ."\n</div>\n";
    $output .= "</li>\n";
    return $output;
  }
}

function theme_dhtml_menu_tree($tree, $parent = NULL, $pid = NULL) {
  if (!$tree) return ''; // no further items
  $add_links = _dhtml_get_add_links();
  $output = '';
  if ($parent && isset($add_links[$parent['link_path']])) {
    $output .= "<li class='leaf'>" . theme('menu_item_link', $parent) . "</li>\n";
  }
  
  $class = 'menu';
  if ($parent == NULL) {
    $class .= ' menu-root';
    $path = drupal_get_path('module', 'dhtml_menu');
    drupal_add_js(array('dhtmlMenu' => array('useEffects' => DHTML_MENU_USE_EFFECTS)), 'setting');
    drupal_add_js($path .'/dhtml_menu.js');
  }
  if (!is_array($tree)) var_dump($tree);
  foreach ($tree as $pid=>$item) {
    if ($item['link']['hidden'] < 0) continue; // 'hidden' is -1 for invisible items; do not display these.
    $pid = str_replace(" ", "", $pid); // pid is going to be a DOM identifier, and can't have spaces.
    $output .= theme('dhtml_menu_item', $item, $pid);
  }
	
  return "\n<ul class=\"$class\">\n". $output ."\n</ul>\n";
}
