<?php
// $Id$

/**
 * @file dhtml_menu.module
 * Adds preprocessors to the menu theming functions
 * that will add dynamic expansion to their menus.
 */

/**
 * Implementation of hook_init().
 * Adds CSS, Javascript and settings to the page.
 */
function dhtml_menu_init() {
  drupal_add_css(drupal_get_path('module', 'dhtml_menu') .'/dhtml_menu.css');
  drupal_add_js(drupal_get_path('module', 'dhtml_menu') .'/dhtml_menu.js');
  
  $settings = array(
    'animations' => array(
       'height' => 'height', 
       'opacity' => 'opacity'
     ), 
    'speed' => 500, 
    'siblings' => 'none', 
    'children' => 'none', 
    'nav' => 'pseudo-child'
  );
  
  foreach ($settings as $setting => &$value) {
    $value = variable_get("dhtml_menu_$setting", $value);
  }
  drupal_add_js(array('dhtmlMenu' => $settings), 'setting');
}

/**
 * Preprocessor for menu_item_link.
 * Adds an ID attribute to menu links and helps the module
 * follow the recursion of menu_tree_output().
 */
function dhtml_menu_theme_menu_item_link($link) {
  // The ID is the mlid or a stripped form of the link path. It just must be unique.
  $id = isset($link['mlid']) ? $link['mlid'] : preg_replace('/[^a-z0-9]/', '0', $link['href']);
  
  if (!isset($link['localized_options']) || !is_array($link['localized_options'])) $link['localized_options'] = array('attributes' => '');
  $link['localized_options']['attributes']['id'] = "menu-". $id;

  // Each link in series is another level of recursion. Add it to the stack.
  _dhtml_menu_stack($link);

  // Pass the altered variables to the normal menu themer.
  return theme_menu_item_link($link);
}

/**
 * Preprocessor for menu_item.
 * Checks whether the current item has children that
 * were not rendered, and loads and renders them.
 */
function dhtml_menu_theme_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  static $cookie;
  if (!isset($cookie)) {
    $cookie = explode(',', @$_COOKIE['dhtml_menu']);
  }

  /* When theme('menu_item') is called, the menu tree below it has been
   * rendered already. Since we are done on this recursion level,
   * one element must be popped off the stack.
   */
  $stack = _dhtml_menu_stack();

  // If there are children, but they were not loaded...
  if ($has_children && !$menu) {
    // Load the tree below the current position.
    $tree = _dhtml_menu_subtree($stack);

    // Render it...
    $menu = menu_tree_output($tree);
    if (!$menu) $has_children = FALSE; // Sanitize tree.
  }

  // Move to the last element in the stack (the current item).
  end($stack);

  // If this item can expand, and is neither saved as open nor in the active trail, close it.
  if ($menu && !($in_active_trail || in_array(substr(key($stack), 5), $cookie))) {
    $extra_class .= ' collapsed start-collapsed';
  }

  return theme_menu_item($link, $has_children, $menu, $in_active_trail, $extra_class);
}

/**
 * Helper function for storing recursion levels.
 *
 * @param $link
 *   If a menu item link is passed, it will be appended to the stack.
 *   If none is given, the stack will be returned and popped by one.
 *
 * @return
 *   The stack, if no parameter is given.
 */
function _dhtml_menu_stack($link = FALSE) {
  static $stack;
  if ($link) {
    $stack[$link['localized_options']['attributes']['id']] = $link;
  }
  else {
    $copy = $stack;
    array_pop($stack);
    return $copy;
  }
}

/**
 * Traverses the menu tree and returns the sub-tree of the item
 * indicated by the parameter.
 *
 * @param $stack
 *   An array of menu item links that are nested in each other in the tree.
 *
 * @return
 *   The items below the lowest item in the stack.
 */
function _dhtml_menu_subtree($stack) {
  reset($stack);
  $start = current($stack);
  $tree = menu_tree_all_data($start['menu_name']);
  foreach ($stack as $item) {
    // Generate the sortable array key of an item:
    $path[] = (50000 + $item['weight']) .' '. $item['title'] .' '. $item['mlid'];
  }

  // Traverse the tree.
  foreach ($path as $key) {
    if (!isset($tree[$key])) {
      $tree = $tree[key($tree)]['below'];
      if (!isset($tree[$key])) return array();
    }
    $tree = $tree[$key]['below'];
  }
  return $tree;
}

/**
 * Implementation of hook_help().
 * @TODO: Move this to dhtml_menu.rebuild.inc once hook_help is no longer called on every page.
 */
function dhtml_menu_help($path) {
  switch ($path) {
    case 'admin/settings/dhtml_menu':
      return t('<em>DHTML Menu</em> adds dynamic functionality to the menus of your site. Ordinarily, reaching the child elements below an item requires you to visit its page. With DHTML Menu, clicking on an item with child elements will expand it without leaving the page, saving time. You can reach the actual page of such an item either by double-clicking on it or visiting the small extra link that will be shown right below it when expanded.');
  }
}

